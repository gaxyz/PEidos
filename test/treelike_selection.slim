initialize(){
        setSeed(seed);
        initializeMutationRate(1e-08);
        initializeMutationType("m1",0.5,"f",0.0);
        initializeMutationType("m2",0.5,"f",0.0);
        initializeGenomicElementType("g1",m1,1.0);
        
        initializeGenomicElement(g1,0,4999999);
        
        initializeRecombinationRate(1e-08);
        
        }
////////////////////////
1 {
        defineConstant("simID", getSeed());
        sim.addSubpop("p1",1000);
        }
////////////////////////
1800 { sim.addSubpopSplit("p10",1000, p1 );}
////////////////////////
1810 { sim.addSubpopSplit("p2",1000, p10 );}
////////////////////////
1820 { sim.addSubpopSplit("p3",1000, p10 );}
////////////////////////
1830 { sim.addSubpopSplit("p4",1000, p10 );}
////////////////////////
1840 { sim.addSubpopSplit("p5",1000, p10 );}
////////////////////////
1850 { sim.addSubpopSplit("p6",1000, p10 );}
////////////////////////
1860 { sim.addSubpopSplit("p7",1000, p10 );}
////////////////////////
1870 { sim.addSubpopSplit("p8",1000, p10 );}
////////////////////////
1880 { sim.addSubpopSplit("p9",1000, p10 );}
////////////////////////
2 late(){sim.outputFull("/tmp/slim_"+simID+".txt");
                          target = sample(p1.genomes,1);
                          target.addNewDrawnMutation(m2,100000);
                          }
////////////////////////
1799: mutation(m1){return F;}
1900: fitness(m2,p5){ return 2.0 ; }
2: late(){
                        mut = sim.mutationsOfType( m2 ) ;
                        
                        if ( size(mut) == 1 )
                        {
                        
                            if (sim.mutationFrequencies(NULL,mut) >= 0.5 )
                            {
                                cat( simID + ": ESTABLISHED -- PROCEEDING WITH SPLIT\n" ) ;
                                sim.deregisterScriptBlock(self);
                            }
                        }
                        else
                        {
                                cat(simID + " GENERATION: "+ sim.generation +": LOST BEFORE ESTABLISHMENT -- RESTARTING \n");
                                // back to gen 1800
                                sim.readFromPopulationFile( "/tmp/slim_" + simID + ".txt" );
                                // start newly seeded run
                                setSeed( rdunif(1,0,asInteger(2^62) - 1 ));
                        
                                // re introduce the sweep mutation
                                target = sample( p1.genomes, 1 );
                                target.addNewDrawnMutation( m2, 100000 );
                        }
                        }
1920 late(){
p10.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p10.vcf")));
p9.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p9.vcf")));
p8.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p8.vcf")));
p7.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p7.vcf")));
p6.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p6.vcf")));
p5.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p5.vcf")));
p4.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p4.vcf")));
p3.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p3.vcf")));
p2.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p2.vcf")));
p1.outputVCFSample(sampleSize=50,replace=F,outputMultiallelics=F,filePath=paste0(c(outdir,"p1.vcf")));
sim.simulationFinished();}
